---
import Layout from '../../layouts/Layout.astro';
import Header from '../../components/Header.astro';
import { getLangFromUrl, useTranslations } from '../../utils/i18n';
import { languages } from '../../i18n/ui';

export function getStaticPaths() {
  return Object.keys(languages).map(lang => ({ params: { lang } }));
}

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

const services = [
  {
    title: t('services.chatbots.title'),
    description: t('services.chatbots.description'),
    features: [
      t('services.chatbots.features.support'),
      t('services.chatbots.features.integration'),
      t('services.chatbots.features.personalization'),
      t('services.chatbots.features.sentiment'),
      t('services.chatbots.features.realtime'),
      t('services.chatbots.features.reports')
    ],
    icon: `<svg xmlns="http://www.w3.org/2000/svg" class="w-12 h-12" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 10h.01M12 10h.01M16 10h.01M9 16H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-5l-5 5v-5z" />
    </svg>`
  },
  {
    title: t('services.automation.title'),
    description: t('services.automation.description'),
    features: [
      t('services.automation.features.workflows'),
      t('services.automation.features.integration'),
      t('services.automation.features.errors'),
      t('services.automation.features.documents'),
      t('services.automation.features.analysis'),
      t('services.automation.features.dashboards')
    ],
    icon: `<svg xmlns="http://www.w3.org/2000/svg" class="w-12 h-12" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" />
    </svg>`
  },
  {
    title: t('services.platforms.title'),
    description: t('services.platforms.description'),
    features: [
      t('services.platforms.features.responsive'),
      t('services.platforms.features.ai'),
      t('services.platforms.features.scalable'),
      t('services.platforms.features.security'),
      t('services.platforms.features.support'),
      t('services.platforms.features.updates')
    ],
    icon: `<svg xmlns="http://www.w3.org/2000/svg" class="w-12 h-12" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 20l4-16m4 4l4 4-4 4M6 16l-4-4 4-4" />
    </svg>`
  }
];
---

<Layout 
  title={t('services.page.title')}
  description={t('services.page.description')}
>
  <Header />
  <main class="pt-20">
    <section class="py-20">
      <div class="container mx-auto px-4">
        <div class="max-w-4xl mx-auto">
          <div class="text-center mb-16">
            <h1 class="text-4xl md:text-5xl font-poppins font-bold gradient-text mb-4">
              {t('services.page.heading')}
            </h1>
            <p class="text-lg text-white/80">
              {t('services.page.subtitle')}
            </p>
          </div>

          <div class="space-y-16">
            {services.map((service, index) => (
              <div class={`flex flex-col md:flex-row gap-8 ${index % 2 === 1 ? 'md:flex-row-reverse' : ''}`}>
                <div class="md:w-1/2">
                  <div class="glass p-8 rounded-lg h-full hover:scale-105 transition-transform duration-300">
                    <div class="text-accent mb-6" set:html={service.icon} />
                    <h2 class="text-2xl font-poppins font-semibold text-white mb-4">
                      {service.title}
                    </h2>
                    <p class="text-white/80 mb-6">
                      {service.description}
                    </p>
                    <ul class="space-y-3">
                      {service.features.map(feature => (
                        <li class="flex items-center gap-2 text-white/70">
                          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-accent flex-shrink-0" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
                          </svg>
                          {feature}
                        </li>
                      ))}
                    </ul>
                  </div>
                </div>
                <div class="md:w-1/2 flex items-center justify-center">
                  <div class="relative w-full">
                    <div class="absolute inset-0 bg-gradient-to-r from-secondary/20 to-accent/20 rounded-lg filter blur-xl"></div>
                    <img 
                      src={`https://images.unsplash.com/photo-${index === 0 ? '1531746790731-6c087fecd65a' : index === 1 ? '1518432031352-d6fc5c10da5a' : '1485827404703-89b55fcc595e'}?auto=format&fit=crop&w=800`}
                      alt={service.title}
                      class="relative rounded-lg shadow-lg w-full hover:scale-105 transition-transform duration-300"
                    />
                  </div>
                </div>
              </div>
            ))}
          </div>

          <div class="text-center mt-16">
            <h2 class="text-2xl font-poppins font-semibold text-white mb-6">
              {t('services.page.cta.title')}
            </h2>
            <a 
              href={`/${lang}/contacto`}
              class="inline-block glow-effect bg-gradient-to-r from-secondary to-accent text-white px-8 py-3 rounded-lg transition-all hover:scale-105"
            >
              {t('services.page.cta.button')}
            </a>
          </div>
        </div>
      </div>
    </section>
  </main>
</Layout>