---
interface Props {
  questions: Array<{
    question: string;
    answer: string;
  }>;
}

const { questions } = Astro.props;
---

<section class="faq">
  <h2 class="faq__title text-3xl md:text-4xl font-poppins font-bold gradient-text mb-4">
    FAQs – Perguntas que nos fazem com frequência
  </h2>
  <p class="faq__intro text-lg text-white/80 mb-12">
    Sabemos que a inteligência artificial ainda levanta muitas dúvidas. Por isso, reunimos aqui algumas das questões mais comuns.
  </p>

  <div class="faq__list space-y-4">
    {questions.map((item, index) => (
      <div class="faq__item glass p-6 rounded-lg">
        <button 
          class="faq__question w-full text-left flex items-center justify-between text-white hover:text-accent transition-colors duration-200"
          aria-expanded="false"
          data-faq-index={index}
        >
          <span class="faq__question-text font-poppins font-semibold text-lg">
            {item.question}
          </span>
          <span class="faq__icon text-accent transition-transform duration-300" aria-hidden="true">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
            </svg>
          </span>
        </button>
        <div 
          class="faq__answer overflow-hidden max-h-0 transition-all duration-300 ease-in-out"
          aria-hidden="true"
        >
          <div class="pt-4 text-white/80">
            {item.answer}
          </div>
        </div>
      </div>
    ))}
  </div>
</section>

<script>
  // FAQ Accordion functionality
  (function() {
    const faqItems = document.querySelectorAll('.faq__item');
    
    faqItems.forEach(item => {
      const button = item.querySelector('.faq__question');
      const answer = item.querySelector('.faq__answer') as HTMLElement;
      const icon = item.querySelector('.faq__icon') as HTMLElement;
      
      if (!button || !answer || !icon) return;
      
      button.addEventListener('click', () => {
        const isExpanded = button.getAttribute('aria-expanded') === 'true';
        
        // Toggle current item
        button.setAttribute('aria-expanded', (!isExpanded).toString());
        answer.setAttribute('aria-hidden', isExpanded.toString());
        answer.style.maxHeight = isExpanded ? '0' : `${answer.scrollHeight}px`;
        icon.style.transform = isExpanded ? 'rotate(0deg)' : 'rotate(180deg)';
        
        // Close other items
        if (!isExpanded) {
          faqItems.forEach(otherItem => {
            if (otherItem !== item) {
              const otherButton = otherItem.querySelector('.faq__question');
              const otherAnswer = otherItem.querySelector('.faq__answer') as HTMLElement;
              const otherIcon = otherItem.querySelector('.faq__icon') as HTMLElement;
              
              if (!otherButton || !otherAnswer || !otherIcon) return;
              
              otherButton.setAttribute('aria-expanded', 'false');
              otherAnswer.setAttribute('aria-hidden', 'true');
              otherAnswer.style.maxHeight = '0';
              otherIcon.style.transform = 'rotate(0deg)';
            }
          });
        }
      });
    });
  })();
</script>

<style>
  .faq {
    max-width: 800px;
    margin: 0 auto;
  }

  .faq__item {
    border: 1px solid rgba(255, 255, 255, 0.1);
    transition: all 0.3s ease;
  }

  .faq__item:hover {
    border-color: var(--accent);
  }

  .faq__question {
    outline: none;
  }

  .faq__question:focus-visible {
    outline: 2px solid var(--accent);
    outline-offset: 2px;
    border-radius: 4px;
  }

  .faq__answer {
    border-top: 1px solid rgba(255, 255, 255, 0.1);
  }
</style> 