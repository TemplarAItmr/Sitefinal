---
import { getLangFromUrl, useTranslations } from '../utils/i18n';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
---

<div id="chatbot-container" class="fixed bottom-4 right-4 z-50">
  <!-- Chat Button -->
  <button
    id="chat-button"
    class="bg-accent hover:bg-accent/90 text-primary p-4 rounded-full shadow-lg transition-transform hover:scale-105"
    aria-label={t('chatbot.button.label')}
  >
    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 10h.01M12 10h.01M16 10h.01M9 16H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-5l-5 5v-5z" />
    </svg>
  </button>

  <!-- Chat Window -->
  <div
    id="chat-window"
    class="hidden fixed bottom-20 right-4 w-96 max-w-[calc(100vw-2rem)] h-[600px] max-h-[calc(100vh-8rem)] bg-white rounded-lg shadow-xl overflow-hidden"
  >
    <!-- Chat Header -->
    <div class="bg-primary p-4 flex justify-between items-center">
      <div class="flex items-center gap-3">
        <img src="/logo.png" alt="TemplarAI Logo" class="w-8 h-8" />
        <div>
          <h3 class="text-white font-semibold">{t('chatbot.title')}</h3>
          <p class="text-xs text-white/60">{t('chatbot.status')}</p>
        </div>
      </div>
      <button
        id="close-chat"
        class="text-white/60 hover:text-white transition-colors"
        aria-label={t('chatbot.close')}
      >
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
        </svg>
      </button>
    </div>

    <!-- Chat Messages -->
    <div id="chat-messages" class="h-[calc(100%-8rem)] overflow-y-auto p-4 space-y-4">
      <!-- Messages will be inserted here -->
    </div>

    <!-- Chat Input -->
    <div class="absolute bottom-0 left-0 right-0 p-4 bg-white border-t">
      <form id="chat-form" class="flex gap-2">
        <input
          type="text"
          id="chat-input"
          class="flex-1 px-4 py-2 rounded-lg border border-neutral focus:ring-2 focus:ring-primary focus:border-transparent"
          placeholder={t('chatbot.input.placeholder')}
          required
        />
        <button
          type="submit"
          class="bg-accent hover:bg-accent/90 text-primary px-4 py-2 rounded-lg transition-colors"
        >
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8" />
          </svg>
        </button>
      </form>
    </div>
  </div>
</div>

<script>
const chatButton = document.getElementById('chat-button');
const chatWindow = document.getElementById('chat-window');
const closeChat = document.getElementById('close-chat');
const chatMessages = document.getElementById('chat-messages');
const chatForm = document.getElementById('chat-form');
const chatInput = document.getElementById('chat-input');

// Get current language from URL
const lang = window.location.pathname.split('/')[1] || 'pt';

// Initial messages
const initialMessages = [
  {
    type: 'bot',
    content: lang === 'en' 
      ? 'Hi! I\'m TemplarAI\'s virtual assistant. How can I help you today?'
      : 'Olá! Sou o assistente virtual da TemplarAI. Como posso ajudar você hoje?',
    options: lang === 'en' 
      ? [
          'I want to know more about chatbots',
          'I need process automation',
          'Information about custom platforms',
          'Talk to a human agent'
        ]
      : [
          'Quero saber mais sobre chatbots',
          'Preciso de automação de processos',
          'Informações sobre plataformas personalizadas',
          'Falar com um atendente humano'
        ]
  }
];

// Toggle chat window
chatButton?.addEventListener('click', () => {
  chatWindow?.classList.toggle('hidden');
  if (!chatWindow?.classList.contains('hidden')) {
    showInitialMessages();
  }
});

closeChat?.addEventListener('click', () => {
  chatWindow?.classList.add('hidden');
});

// Show messages
function showMessage(message, type = 'user') {
  const messageElement = document.createElement('div');
  messageElement.className = `flex ${type === 'bot' ? 'justify-start' : 'justify-end'} items-end gap-2`;

  const contentElement = document.createElement('div');
  contentElement.className = `${
    type === 'bot'
      ? 'bg-neutral/10 text-neutral'
      : 'bg-accent text-primary'
  } rounded-lg p-3 max-w-[80%]`;

  contentElement.textContent = message.content;
  messageElement.appendChild(contentElement);

  if (message.options && type === 'bot') {
    const optionsElement = document.createElement('div');
    optionsElement.className = 'mt-4 space-y-2';
    
    message.options.forEach(option => {
      const button = document.createElement('button');
      button.className = 'block w-full text-left px-4 py-2 rounded bg-neutral/5 hover:bg-neutral/10 transition-colors';
      button.textContent = option;
      button.onclick = () => handleOptionClick(option);
      optionsElement.appendChild(button);
    });

    contentElement.appendChild(optionsElement);
  }

  chatMessages?.appendChild(messageElement);
  chatMessages?.scrollTo(0, chatMessages.scrollHeight);
}

function showInitialMessages() {
  chatMessages.innerHTML = '';
  initialMessages.forEach(message => showMessage(message, 'bot'));
}

// Handle option click
function handleOptionClick(option) {
  showMessage({ content: option });
  
  // Simulate bot response
  setTimeout(() => {
    let response;
    if (lang === 'en') {
      switch (option) {
        case 'I want to know more about chatbots':
          response = {
            content: 'Our chatbots are developed with advanced AI to provide 24/7 service, personalization, and multi-platform integration. Would you like to schedule a demo?',
            options: ['Yes, schedule demo', 'No, just more information']
          };
          break;
        case 'I need process automation':
          response = {
            content: 'Excellent! We automate processes to increase efficiency and reduce costs. In which area do you need automation?',
            options: ['Customer Service', 'Sales', 'Administrative', 'Other']
          };
          break;
        case 'Information about custom platforms':
          response = {
            content: 'We develop custom platforms with AI integration. What\'s the main goal of your platform?',
            options: ['Internal Management', 'E-commerce', 'Education', 'Other']
          };
          break;
        case 'Talk to a human agent':
          response = {
            content: 'Sure! One of our specialists will contact you soon. Please provide your email:',
            options: ['I prefer to schedule for later', 'Back to main menu']
          };
          break;
        default:
          response = {
            content: 'I understand! I\'ll direct you to one of our specialists. Meanwhile, would you like to learn more about our services?',
            options: ['View services', 'Back to main menu']
          };
      }
    } else {
      switch (option) {
        case 'Quero saber mais sobre chatbots':
          response = {
            content: 'Nossos chatbots são desenvolvidos com IA avançada para oferecer atendimento 24/7, personalização e integração com múltiplas plataformas. Gostaria de agendar uma demonstração?',
            options: ['Sim, quero agendar', 'Não, apenas mais informações']
          };
          break;
        case 'Preciso de automação de processos':
          response = {
            content: 'Excelente! Automatizamos processos para aumentar a eficiência e reduzir custos. Em qual área você precisa de automação?',
            options: ['Atendimento', 'Vendas', 'Administrativo', 'Outro']
          };
          break;
        case 'Informações sobre plataformas personalizadas':
          response = {
            content: 'Desenvolvemos plataformas sob medida com integração de IA. Qual o principal objetivo da sua plataforma?',
            options: ['Gestão interna', 'E-commerce', 'Educação', 'Outro']
          };
          break;
        case 'Falar com um atendente humano':
          response = {
            content: 'Claro! Em breve um de nossos especialistas entrará em contato. Por favor, informe seu e-mail:',
            options: ['Prefiro agendar para depois', 'Voltar ao menu inicial']
          };
          break;
        default:
          response = {
            content: 'Entendi! Vou direcionar você para um de nossos especialistas. Enquanto isso, que tal conhecer mais sobre nossos serviços?',
            options: ['Ver serviços', 'Voltar ao menu inicial']
          };
      }
    }
    showMessage(response, 'bot');
  }, 1000);
}

// Handle form submission
chatForm?.addEventListener('submit', (e) => {
  e.preventDefault();
  const message = chatInput.value.trim();
  if (message) {
    showMessage({ content: message });
    chatInput.value = '';
    
    // Simulate bot response
    setTimeout(() => {
      showMessage({
        content: lang === 'en'
          ? 'I understand your message. How can I help further?'
          : 'Entendi sua mensagem. Como posso ajudar mais?',
        options: lang === 'en'
          ? ['See more options', 'Talk to agent', 'End conversation']
          : ['Ver mais opções', 'Falar com atendente', 'Finalizar conversa']
      }, 'bot');
    }, 1000);
  }
});
</script>